function ogInstallSystemMenu {
echo "pendiente de subir a git el burg.cfg.tempmlate"
echo "recordar la llamada desde el configureOsCustom"
echo "recordar copiar las plantillas"
# Instala el GRUB en la partición de linux y asignar un timeoutout muy corto. 
# Instala el BURG en el MBR y su configuración en la partición de linux.  (no será necesario una partición cache ni disco mecánico para el arranque)
# Copia una plantilla de BURG (menu de windows 10 y linux)  a la partición de linux para que los use el BURG del MBR.
# Variables locales.

local PART DISK FIRSTAGE SECONSTAGE PREFIXSECONDSTAGE CHECKOS KERNELPARAM BACKUPNAME FILECFG

# Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME  int_ndiskSecondStage int_partitionSecondStage bolean_Configure_2ndStage   \"param param \"  " \
           "$FUNCNAME 1 1 FALSE " \
           "$FUNCNAME 1 1 TRUE \"nomodeset irqpoll pci=noacpi quiet splash \" "
    return
fi  

# Error si no se reciben 2 parametros.
[ $# -ge 2 ] || return $(ogRaiseError $OG_ERR_FORMAT; echo $?)


DISK=$1; PART=$2;
CHECKOS=${3:-"FALSE"}
KERNELPARAM=$4
BACKUPNAME=".backup.og"

#Error si no es linux.
ogCheckStringInGroup $(ogGetFsType $DISK $PART) "CACHE EXT4 EXT3 EXT2" || return $(ogRaiseError $OG_ERR_PARTITION "burg no soporta esta particion"; echo $?)

echo "Instalar grub2 en Partition y configurarlo sin opciones de menu y parámetros de kernel nomodeset irqpoll acpi=on"
ogGrubInstallPartition $DISK $PART TRUE "irqpoll acpi=on noresume quiet splash"
echo "Montar particíon"
PMOUNT=$(ogMount $DISK $PART)
echo "asignar timeout para grub2"
sed -i s/timeout=.*$/timeout=1/g ${PMOUNT}/boot/grubPARTITION/boot/grub/grub.cfg
echo "instalar el BURG en el MBR" 
ogBurgInstallMbr $DISK $PART TRUE
echo "copiar plantilla del BURG"
cp /opt/opengnsys/lib/burg/burg.cfg.template1 ${PMOUNT}/boot/burg/burg.cfg 
echo "desmontar particion"
ogUnmount $DISK $PART
updateBootCache
}













#         ogBurgInstallMbrOLD   int_disk_GRUBCFG  int_partition_GRUBCFG 
#@param   bolean_Check_Os_installed_and_Configure_2ndStage   true | false[default] 
#@brief   Instala y actualiza el gestor grub en el MBR del disco duro donde se encuentra el fichero grub.cfg. Admite sistemas Windows.
#@param   int_disk_SecondStage      
#@param   int_part_SecondStage     
#@param   bolean_Check_Os_installed_and_Configure_2ndStage   true | false[default] 
#@return  
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@version 1.1.0 - Primeras pruebas instalando BURG. Codigo basado en el ogGrubInstallMBR.
#@author  Antonio J. Doblas Viso.   Universidad de Malaga.
#@date    2017-06-23
#*/ ##

function ogBurgInstallMbrOLD {
 
# Variables locales.
local PART DISK FIRSTAGE SECONSTAGE PREFIXSECONDSTAGE CHECKOS KERNELPARAM BACKUPNAME FILECFG

# Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME  int_ndiskSecondStage int_partitionSecondStage bolean_Configure_2ndStage   \"param param \"  " \
           "$FUNCNAME 1 1 FALSE " \
           "$FUNCNAME 1 1 TRUE \"nomodeset irqpoll pci=noacpi quiet splash \" "
    return
fi  

# Error si no se reciben 2 parametros.
[ $# -ge 2 ] || return $(ogRaiseError $OG_ERR_FORMAT; echo $?)


DISK=$1; PART=$2;
CHECKOS=${3:-"FALSE"}
KERNELPARAM=$4
BACKUPNAME=".backup.og"

#Error si no es linux.
ogCheckStringInGroup $(ogGetFsType $DISK $PART) "CACHE EXT4 EXT3 EXT2" || return $(ogRaiseError $OG_ERR_PARTITION "burg no soporta esta particion"; echo $?)


#La primera etapa del grub se fija en el primer disco duro 
FIRSTSTAGE=$(ogDiskToDev 1)

#localizar disco segunda etapa del grub
SECONDSTAGE=$(ogMount $DISK $PART)

# prepara el directorio principal de la segunda etapa (y copia los binarios)
[ -d ${SECONDSTAGE}/boot/burg/ ]  || mkdir -p ${SECONDSTAGE}/boot/burg/; cp -prv /boot/burg/*  ${SECONDSTAGE}/boot/burg/; cp  $OGLIB/burg/*  ${SECONDSTAGE}/boot/burg/;

#Copiamos el tema 
mkdir -p  ${SECONDSTAGE}/boot/burg/themes/OpenGnsys
cp -prv "$OGLIB/burg/themes" "${SECONDSTAGE}/boot/burg/"

#Localizar directorio segunda etapa del grub   
#PREFIXSECONDSTAGE="/boot/burg/"

# Si Reconfigurar segunda etapa (grub.cfg) == FALSE
if [ -f ${SECONDSTAGE}/boot/burg/burg.cfg -o -f ${SECONDSTAGE}/boot/burg/burg.cfg$BACKUPNAME ]
then 
    if [ "$CHECKOS" == "false" -o "$CHECKOS" == "FALSE" ]
    then
        burg-install --force --root-directory=${SECONDSTAGE} $FIRSTSTAGE
        return $?
    fi
fi

# SI Reconfigurar segunda etapa (burg.cfg) == TRUE 

#llamada a updateBootCache para que aloje la primera fase del ogLive
updateBootCache

#Configur la sintaxis grub para evitar menus de "recovery" en el OGLive
echo "GRUB_DISABLE_RECOVERY=\"true\"" >> /etc/default/grub
echo "GRUB_DISABLE_LINUX_UUID=\"true\"" >> /etc/default/grub


#Preparar configuración segunda etapa: crear ubicacion
mkdir -p ${SECONDSTAGE}${PREFIXSECONDSTAGE}/boot/burg/

#Preparar configuración segunda etapa: crear cabecera del fichero
#/etc/burg.d/00_header > ${SECONDSTAGE}${PREFIXSECONDSTAGE}/boot/burg/burg.cfg

FILECFG=${SECONDSTAGE}${PREFIXSECONDSTAGE}/boot/burg/burg.cfg

cat > "$FILECFG" << EOF

set theme_name=OpenGnsys
set gfxmode=1024x768
#set root='(hd$(expr $DISK - 1),$(expr $PART - 1))'

set locale_dir=(\$root)/boot/burg/locale

#GRUB_DEFAULT="Reboot"
set default=0
set timeout=25
set lang=es


insmod ext2
insmod gettext





if [ -s \$prefix/burgenv ]; then
  load_env
fi

if [ \${prev_saved_entry} ]; then
  set saved_entry=\${prev_saved_entry}
  save_env saved_entry
  set prev_saved_entry=
  save_env prev_saved_entry
  set boot_once=true
fi

function savedefault {
  if [ -z \${boot_once} ]; then
    saved_entry=\${chosen}
    save_env saved_entry
  fi
}
function select_menu {
  if menu_popup -t template_popup theme_menu ; then
    free_config template_popup template_subitem menu class screen
    load_config \${prefix}/themes/\${theme_name}/theme \${prefix}/themes/custom/theme_\${theme_name}
    save_env theme_name
    menu_refresh
  fi
}

function toggle_fold {
  if test -z $theme_fold ; then
    set theme_fold=1
  else
    set theme_fold=
  fi
  save_env theme_fold
  menu_refresh
}
function select_resolution {
  if menu_popup -t template_popup resolution_menu ; then
    menu_reload_mode
    save_env gfxmode
  fi
}





if test -f \${prefix}/themes/\${theme_name}/theme ; then
  insmod coreui
  menu_region.text
  load_string '+theme_menu { -OpenGnsys { command="set theme_name=OpenGnsys" }}'   
 # Comentar los hotkety
 #load_config \${prefix}/themes/conf.d/10_hotkey
  load_config \${prefix}/themes/\${theme_name}/theme \${prefix}/themes/custom/theme_\${theme_name}
  insmod vbe
  insmod png
  insmod jpeg
  set gfxfont="Unifont Regular 16"
  menu_region.gfx
  vmenu resolution_menu
  controller.ext
fi




EOF


#Preparar configuración segunda etapa: crear entrada del sistema operativo
grubSyntax "$KERNELPARAM" >> "$FILECFG" 


#Mas Opciones 
#cat >> "$FILECFG" << EOF
#menuentry "PowerOff" --class shutdown --class gnu --class os {
#       insmod acpi
# 	   insmod pci
#       halt
#}
#menuentry "Reboot" --class restart --class gnu --class os {
#       insmod acpi
#       reboot
#}
#EOF





#Instalar el burg 
burg-install --force --root-directory=${SECONDSTAGE} $FIRSTSTAGE
}




